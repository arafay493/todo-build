{"version":3,"sources":["Helper/Util.ts","Components/Common/Chip.tsx","Components/Dropdown/Dropdown.tsx","Components/Modal/Modal.tsx","Components/CustomInput/CustomInput.tsx","Components/Card/CardInfo/CardInfo.tsx","Components/Card/Card.tsx","Components/Board/Board.tsx","ApiMockData/dummyData.ts","Helper/APILayers.ts","Home/Dashboard.tsx","App.tsx","index.tsx"],"names":["formatDate","value","date","Date","getDate","getMonth","colorsList","Chip","props","item","removeLabel","_jsxs","style","backgroundColor","color","children","text","_jsx","X","onClick","Dropdown","dropdownRef","useRef","handleClick","event","_dropdownRef$current","current","contains","target","onClose","useEffect","document","addEventListener","removeEventListener","ref","className","concat","class","Modal","stopPropagation","CustomInput","onSubmit","displayClass","editClass","placeholder","defaultValue","buttonText","_useState","useState","_useState2","_slicedToArray","isCustomInput","setIsCustomInput","_useState3","_useState4","inputText","setInputText","e","preventDefault","type","onChange","autoFocus","CardInfo","_cardValues$labels","_cardValues$tasks4","card","boardId","updateCard","selectedColor","setSelectedColor","_objectSpread","cardValues","setCardValues","label","tempLabels","labels","filter","id","calculatedPercent","_cardValues$tasks","_cardValues$tasks2","_cardValues$tasks2$fi","_cardValues$tasks3","tasks","length","completed","calculatePercent","Type","title","List","desc","Calendar","min","toISOString","substr","Tag","map","index","findIndex","_toConsumableArray","CheckSquare","width","defaultChecked","Boolean","updateTask","checked","Trash","tempTasks","removeTask","task","now","Math","random","Card","_tasks$filter","removeCard","onDragEnd","onDragEnter","showDropdown","setShowDropdown","showModal","setShowModal","_Fragment","draggable","MoreHorizontal","AlignLeft","Clock","Board","_board$cards","_board$cards2","board","addCard","removeBoard","cards","ApiMockResponse","LocalStorageKeyName","BoardAPI","_classCallCheck","_createClass","key","_fetchBoardList","_asyncToGenerator","_regeneratorRuntime","mark","_callee","apiData","BoardList","_localStorage$getItem","localStorageData","wrap","_context","prev","next","localStorage","getItem","JSON","parse","updateLocalStorageBoards","abrupt","stop","apply","arguments","fetchBoardList","_fetchBoardList2","_callee2","api","_context2","boards","setItem","stringify","Dashboard","setBoards","_fetchData","sent","fetchData","cardId","targetCard","setTargetCard","addCardHandler","boardIndex","tempBoardsList","push","cardIndex","splice","_boards$sourceBoardIn","_boards$sourceBoardIn2","_boards$targetBoardIn","_boards$targetBoardIn2","sourceBoardIndex","sourceCardIndex","targetBoardIndex","targetCardIndex","sourceCard","name","App","ReactDOM","render","React","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.605f9af2.chunk.js","sourcesContent":["export const formatDate = (value: string) => {\n  if (!value) return \"\";\n  const date = new Date(value);\n  if (!date) return \"\";\n\n  const months = [\n    \"Jan\",\n    \"Feb\",\n    \"Mar\",\n    \"Apr\",\n    \"May\",\n    \"Jun\",\n    \"Jul\",\n    \"Aug\",\n    \"Sep\",\n    \"Oct\",\n    \"Nov\",\n    \"Dec\",\n  ];\n\n  const day = date.getDate();\n  const month = months[date.getMonth()];\n  return day + \" \" + month;\n};\nexport const colorsList = [\n  \"#a8193d\",\n  \"#4fcc25\",\n  \"#1ebffa\",\n  \"#8da377\",\n  \"#9975bd\",\n  \"#cf61a1\",\n  \"#240959\",\n];\n","import React from \"react\";\nimport { X } from \"react-feather\";\nimport { ILabel } from \"../../Interfaces/Kanban\";\ninterface ChipProps {\n  item: ILabel;\n  removeLabel?: (label: ILabel) => void;\n}\nexport default function Chip(props: ChipProps) {\n  const { item, removeLabel } = props;\n  return (\n    <label style={{ backgroundColor: item.color, color: \"#fff\" }}>\n      {item.text}\n      {removeLabel && <X onClick={() => removeLabel(item)} />}\n    </label>\n  );\n}\n","import React, { useEffect, useRef } from \"react\";\n\nimport \"./Dropdown.css\";\n\nfunction Dropdown(props: any) {\n  const dropdownRef: any = useRef();\n\n  const handleClick = (event: any) => {\n    if (\n      dropdownRef &&\n      !dropdownRef.current?.contains(event.target) &&\n      props.onClose\n    )\n      props.onClose();\n  };\n\n  useEffect(() => {\n    document.addEventListener(\"click\", handleClick);\n\n    return () => {\n      document.removeEventListener(\"click\", handleClick);\n    };\n  });\n\n  return (\n    <div\n      ref={dropdownRef}\n      className={`dropdown custom-scroll ${props.class ? props.class : \"\"}`}\n    >\n      {props.children}\n    </div>\n  );\n}\n\nexport default Dropdown;\n","import React from \"react\";\n\nimport \"./Modal.css\";\n\nfunction Modal(props: any) {\n  return (\n    <div\n      className=\"modal\"\n      onClick={() => (props.onClose ? props.onClose() : \"\")}\n    >\n      <div\n        className=\"modal-content custom-scroll\"\n        onClick={(event) => event.stopPropagation()}\n      >\n        {props.children}\n      </div>\n    </div>\n  );\n}\n\nexport default Modal;\n","import React, { useState } from \"react\";\n\nimport { X } from \"react-feather\";\n\nimport \"./CustomInput.css\";\ninterface CustomInputProps {\n  text: string;\n  onSubmit: (value: string) => void;\n  displayClass?: string;\n  editClass?: string;\n  placeholder?: string;\n  defaultValue?: string;\n  buttonText?: string;\n}\nfunction CustomInput(props: CustomInputProps) {\n  const {\n    text,\n    onSubmit,\n    displayClass,\n    editClass,\n    placeholder,\n    defaultValue,\n    buttonText,\n  } = props;\n  const [isCustomInput, setIsCustomInput] = useState(false);\n  const [inputText, setInputText] = useState(defaultValue || \"\");\n\n  const submission = (e: any) => {\n    e.preventDefault();\n    if (inputText && onSubmit) {\n      setInputText(\"\");\n      onSubmit(inputText);\n    }\n    setIsCustomInput(false);\n  };\n\n  return (\n    <div className=\"custom-input\">\n      {isCustomInput ? (\n        <form\n          className={`custom-input-edit ${editClass ? editClass : \"\"}`}\n          onSubmit={submission}\n        >\n          <input\n            type=\"text\"\n            value={inputText}\n            placeholder={placeholder || text}\n            onChange={(event) => setInputText(event.target.value)}\n            autoFocus\n          />\n          <div className=\"custom-input-edit-footer\">\n            <button type=\"submit\">{buttonText || \"Add\"}</button>\n            <X onClick={() => setIsCustomInput(false)} className=\"closeIcon\" />\n          </div>\n        </form>\n      ) : (\n        <p\n          className={`custom-input-display ${displayClass ? displayClass : \"\"}`}\n          onClick={() => setIsCustomInput(true)}\n        >\n          {text}\n        </p>\n      )}\n    </div>\n  );\n}\n\nexport default CustomInput;\n","import React, { useEffect, useState } from \"react\";\nimport { Calendar, CheckSquare, List, Tag, Trash, Type } from \"react-feather\";\nimport { colorsList } from \"../../../Helper/Util\";\nimport Modal from \"../../Modal/Modal\";\nimport CustomInput from \"../../CustomInput/CustomInput\";\n\nimport \"./CardInfo.css\";\nimport { ICard, ILabel, ITask } from \"../../../Interfaces/Kanban\";\nimport Chip from \"../../Common/Chip\";\ninterface CardInfoProps {\n  onClose: () => void;\n  card: ICard;\n  boardId: number;\n  updateCard: (boardId: number, cardId: number, card: ICard) => void;\n}\nfunction CardInfo(props: CardInfoProps) {\n  const { onClose, card, boardId, updateCard } = props;\n  const [selectedColor, setSelectedColor] = useState(\"\");\n  const [cardValues, setCardValues] = useState<ICard>({\n    ...card,\n  });\n\n  const updateTitle = (value: string) => {\n    setCardValues({ ...cardValues, title: value });\n  };\n\n  const updateDesc = (value: string) => {\n    setCardValues({ ...cardValues, desc: value });\n  };\n\n  const addLabel = (label: ILabel) => {\n    const index = cardValues.labels.findIndex(\n      (item) => item.text === label.text,\n    );\n    if (index > -1) return; //if label text already exist then return\n\n    setSelectedColor(\"\");\n    setCardValues({\n      ...cardValues,\n      labels: [...cardValues.labels, label],\n    });\n  };\n\n  const removeLabel = (label: ILabel) => {\n    const tempLabels = cardValues.labels.filter(\n      (item) => item.text !== label.text,\n    );\n\n    setCardValues({\n      ...cardValues,\n      labels: tempLabels,\n    });\n  };\n\n  const addTask = (value: string) => {\n    const task: ITask = {\n      id: Date.now() + Math.random() * 2,\n      completed: false,\n      text: value,\n    };\n    setCardValues({\n      ...cardValues,\n      tasks: [...cardValues.tasks, task],\n    });\n  };\n\n  const removeTask = (id: number) => {\n    const tasks = [...cardValues.tasks];\n\n    const tempTasks = tasks.filter((item) => item.id !== id);\n    setCardValues({\n      ...cardValues,\n      tasks: tempTasks,\n    });\n  };\n\n  const updateTask = (id: number, value: boolean) => {\n    const tasks = [...cardValues.tasks];\n\n    const index = tasks.findIndex((item) => item.id === id);\n    if (index < 0) return;\n\n    tasks[index].completed = Boolean(value);\n\n    setCardValues({\n      ...cardValues,\n      tasks,\n    });\n  };\n\n  const calculatePercent = () => {\n    if (!cardValues.tasks?.length) return 0;\n    const completed = cardValues.tasks?.filter(\n      (item) => item.completed,\n    )?.length;\n    return (completed / cardValues.tasks?.length) * 100;\n  };\n\n  const updateDate = (date: string) => {\n    if (!date) return;\n\n    setCardValues({\n      ...cardValues,\n      date,\n    });\n  };\n\n  useEffect(() => {\n    if (updateCard) updateCard(boardId, cardValues.id, cardValues);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [cardValues]);\n\n  const calculatedPercent = calculatePercent();\n\n  return (\n    <Modal onClose={onClose}>\n      <div className=\"cardinfo\">\n        <div className=\"cardinfo-box\">\n          <div className=\"cardinfo-box-title\">\n            <Type />\n            <p>Title</p>\n          </div>\n          <CustomInput\n            defaultValue={cardValues.title}\n            text={cardValues.title}\n            placeholder=\"Enter Title\"\n            onSubmit={updateTitle}\n          />\n        </div>\n\n        <div className=\"cardinfo-box\">\n          <div className=\"cardinfo-box-title\">\n            <List />\n            <p>Description</p>\n          </div>\n          <CustomInput\n            defaultValue={cardValues.desc}\n            text={cardValues.desc || \"Add a Description\"}\n            placeholder=\"Enter description\"\n            onSubmit={updateDesc}\n          />\n        </div>\n\n        <div className=\"cardinfo-box\">\n          <div className=\"cardinfo-box-title\">\n            <Calendar />\n            <p>Date</p>\n          </div>\n          <input\n            type=\"date\"\n            defaultValue={cardValues.date}\n            min={new Date().toISOString().substr(0, 10)}\n            onChange={(event) => updateDate(event.target.value)}\n          />\n        </div>\n\n        <div className=\"cardinfo-box\">\n          <div className=\"cardinfo-box-title\">\n            <Tag />\n            <p>Labels</p>\n          </div>\n          <div className=\"cardinfo-box-labels\">\n            {cardValues.labels?.map((item, index) => (\n              <Chip key={index} item={item} removeLabel={removeLabel} />\n            ))}\n          </div>\n          <ul>\n            {colorsList.map((item, index) => (\n              <li\n                key={index}\n                style={{ backgroundColor: item }}\n                className={selectedColor === item ? \"li-active\" : \"\"}\n                onClick={() => setSelectedColor(item)}\n              />\n            ))}\n          </ul>\n          <CustomInput\n            text=\"Add Label\"\n            placeholder=\"Enter label text\"\n            onSubmit={(value: string) =>\n              addLabel({ color: selectedColor, text: value })\n            }\n          />\n        </div>\n\n        <div className=\"cardinfo-box\">\n          <div className=\"cardinfo-box-title\">\n            <CheckSquare />\n            <p>Tasks</p>\n          </div>\n          <div className=\"cardinfo-box-progress-bar\">\n            <div\n              className=\"cardinfo-box-progress\"\n              style={{\n                width: `${calculatedPercent}%`,\n                backgroundColor: calculatedPercent === 100 ? \"limegreen\" : \"\",\n              }}\n            />\n          </div>\n          <div className=\"cardinfo-box-task-list\">\n            {cardValues.tasks?.map((item) => (\n              <div key={item.id} className=\"cardinfo-box-task-checkbox\">\n                <input\n                  type=\"checkbox\"\n                  defaultChecked={item.completed}\n                  onChange={(event) =>\n                    updateTask(item.id, event.target.checked)\n                  }\n                />\n                <p className={item.completed ? \"completed\" : \"\"}>{item.text}</p>\n                <Trash onClick={() => removeTask(item.id)} />\n              </div>\n            ))}\n          </div>\n          <CustomInput\n            text={\"Add a Task\"}\n            placeholder=\"Enter task\"\n            onSubmit={addTask}\n          />\n        </div>\n      </div>\n    </Modal>\n  );\n}\n\nexport default CardInfo;\n","import React, { useState } from \"react\";\nimport { AlignLeft, CheckSquare, Clock, MoreHorizontal } from \"react-feather\";\nimport { formatDate } from \"../../Helper/Util\";\nimport { ICard } from \"../../Interfaces/Kanban\";\nimport Chip from \"../Common/Chip\";\nimport Dropdown from \"../Dropdown/Dropdown\";\n\nimport \"./Card.css\";\nimport CardInfo from \"./CardInfo/CardInfo\";\ninterface CardProps {\n  card: ICard;\n  boardId: number;\n  removeCard: (boardId: number, cardId: number) => void;\n  onDragEnd: (boardId: number, cardId: number) => void;\n  onDragEnter: (boardId: number, cardId: number) => void;\n  updateCard: (boardId: number, cardId: number, card: ICard) => void;\n}\nfunction Card(props: CardProps) {\n  const { card, boardId, removeCard, onDragEnd, onDragEnter, updateCard } =\n    props;\n  const { id, title, desc, date, tasks, labels } = card;\n  const [showDropdown, setShowDropdown] = useState(false);\n  const [showModal, setShowModal] = useState(false);\n\n  return (\n    <>\n      {showModal && (\n        <CardInfo\n          onClose={() => setShowModal(false)}\n          card={card}\n          boardId={boardId}\n          updateCard={updateCard}\n        />\n      )}\n      <div\n        className=\"card\"\n        key={card.id}\n        draggable\n        onDragEnd={() => onDragEnd(boardId, id)}\n        onDragEnter={() => onDragEnter(boardId, id)}\n        onClick={() => setShowModal(true)}\n      >\n        <div className=\"card-top\">\n          <div className=\"card-top-labels\">\n            {labels?.map((item, index) => (\n              <Chip key={index} item={item} />\n            ))}\n          </div>\n          <div\n            className=\"card-top-more\"\n            onClick={(event) => {\n              event.stopPropagation();\n              setShowDropdown(true);\n            }}\n          >\n            <MoreHorizontal />\n            {showDropdown && (\n              <Dropdown\n                class=\"board-dropdown\"\n                onClose={() => setShowDropdown(false)}\n              >\n                <p onClick={() => removeCard(boardId, id)}>Delete Card</p>\n              </Dropdown>\n            )}\n          </div>\n        </div>\n        <div className=\"card-title\">{title}</div>\n        <div>\n          <p title={desc}>\n            <AlignLeft />\n          </p>\n        </div>\n        <div className=\"card-footer\">\n          {date && (\n            <p className=\"card-footer-item\">\n              <Clock className=\"card-footer-icon\" />\n              {formatDate(date)}\n            </p>\n          )}\n          {tasks && tasks?.length > 0 && (\n            <p className=\"card-footer-item\">\n              <CheckSquare className=\"card-footer-icon\" />\n              {tasks?.filter((item) => item.completed)?.length}/{tasks?.length}\n            </p>\n          )}\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport default Card;\n","import React, { useState } from \"react\";\nimport { MoreHorizontal } from \"react-feather\";\n\nimport Card from \"../Card/Card\";\nimport Dropdown from \"../Dropdown/Dropdown\";\nimport CustomInput from \"../CustomInput/CustomInput\";\n\nimport \"./Board.css\";\nimport { IBoard, ICard } from \"../../Interfaces/Kanban\";\n\ninterface BoardProps {\n  board: IBoard;\n  addCard: (boardId: number, title: string) => void;\n  removeBoard: (boardId: number) => void;\n  removeCard: (boardId: number, cardId: number) => void;\n  onDragEnd: (boardId: number, cardId: number) => void;\n  onDragEnter: (boardId: number, cardId: number) => void;\n  updateCard: (boardId: number, cardId: number, card: ICard) => void;\n}\n\nfunction Board(props: BoardProps) {\n  const {\n    board,\n    addCard,\n    removeBoard,\n    removeCard,\n    onDragEnd,\n    onDragEnter,\n    updateCard,\n  } = props;\n  const [showDropdown, setShowDropdown] = useState(false);\n  return (\n    <div className=\"board\">\n      <div className=\"board-inner\" key={board?.id}>\n        <div className=\"board-header\">\n          <p className=\"board-header-title\">\n            {board?.title}\n            <span>{board?.cards?.length || 0}</span>\n          </p>\n          <div\n            className=\"board-header-title-more\"\n            onClick={() => setShowDropdown(true)}\n          >\n            <MoreHorizontal />\n            {showDropdown && (\n              <Dropdown\n                class=\"board-dropdown\"\n                onClose={() => setShowDropdown(false)}\n              >\n                <p onClick={() => removeBoard(board?.id)}>Delete Board</p>\n              </Dropdown>\n            )}\n          </div>\n        </div>\n        <div className=\"board-cards custom-scroll\">\n          {board?.cards?.map((item) => (\n            <Card\n              key={item.id}\n              card={item}\n              boardId={board.id}\n              removeCard={removeCard}\n              onDragEnter={onDragEnter}\n              onDragEnd={onDragEnd}\n              updateCard={updateCard}\n            />\n          ))}\n          <CustomInput\n            text=\"+ Add Card\"\n            placeholder=\"Enter Card Title\"\n            displayClass=\"board-add-card\"\n            editClass=\"board-add-card-edit\"\n            onSubmit={(value: string) => addCard(board?.id, value)}\n          />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Board;\n","import { IBoard } from \"../Interfaces/Kanban\";\n\nexport const ApiMockResponse: IBoard[] = [\n  {\n    id: 1651319512266.7095,\n    title: \"Discover\",\n    cards: [\n      {\n        id: 1651319552926.0933,\n        title: \"Task1\",\n        labels: [{ color: \"#cf61a1\", text: \"Urgent\" }],\n        date: \"2022-05-05\",\n        tasks: [\n          { id: 1651319625559.8025, completed: true, text: \"Task1_subtask1\" },\n          { id: 1651319629650.8945, completed: true, text: \"Task1_subtask2\" },\n          { id: 1651319633774.9905, completed: true, text: \"Task1_subtask3\" },\n        ],\n        desc: \"Task1 Detail Description\",\n      },\n      {\n        id: 1651319568365.593,\n        title: \"Task2\",\n        labels: [{ color: \"#1ebffa\", text: \"Frontend\" }],\n        date: \"\",\n        tasks: [],\n      },\n    ],\n  },\n  {\n    id: 1651319523126.113,\n    title: \"Doing\",\n    cards: [\n      {\n        id: 1651319672685.5078,\n        title: \"Task3\",\n        labels: [{ color: \"#9975bd\", text: \"Database\" }],\n        date: \"\",\n        tasks: [\n          { id: 1651319728301.3855, completed: false, text: \"restore db\" },\n        ],\n      },\n    ],\n  },\n  {\n    id: 1651319530017.122,\n    title: \"In-Review\",\n    cards: [\n      {\n        id: 1651319677070.0732,\n        title: \"Task4\",\n        labels: [{ color: \"#8da377\", text: \"figma\" }],\n        date: \"2022-05-06\",\n        tasks: [],\n      },\n    ],\n  },\n  {\n    id: 1651319535931.4182,\n    title: \"Completed\",\n    cards: [\n      {\n        id: 1651319680948.0479,\n        title: \"Task5\",\n        labels: [{ color: \"#4fcc25\", text: \"Payment API\" }],\n        date: \"2022-05-04\",\n        tasks: [\n          { id: 1651319820180.9648, completed: false, text: \"GraphQl\" },\n          { id: 1651319833779.3252, completed: true, text: \"Restful API\" },\n        ],\n      },\n    ],\n  },\n];\n","import { ApiMockResponse } from \"../ApiMockData/dummyData\";\nimport { IBoard } from \"../Interfaces/Kanban\";\n\nconst LocalStorageKeyName = \"kanban-boards\";\n//Data Layer\nexport class BoardAPI {\n  async fetchBoardList(): Promise<IBoard[]> {\n    const apiData: IBoard[] = ApiMockResponse;\n    let BoardList: IBoard[] = [];\n    //first check local storage if local storage is empty then add api mock data as seed\n    if (localStorage.getItem(LocalStorageKeyName)) {\n      const localStorageData: IBoard[] = JSON.parse(\n        localStorage.getItem(LocalStorageKeyName) ?? \"\",\n      );\n      BoardList = [...localStorageData];\n    } else {\n      BoardList = [...apiData];\n      updateLocalStorageBoards(BoardList);\n    }\n\n    return BoardList;\n    //TODO:integrate API module when got API from backend team :)\n    /*\n      private readonly api = new Api();//it will have all Restful verbs functions\n      return axios.get(`ENDPOINT_GOES_HERE`)\n      .then((res: { data: any; }) => {\n        return res.data;\n      });\n      */\n  }\n} //BoardAPI Class End\n\n//Business Layer\nexport async function fetchBoardList(): Promise<IBoard[]> {\n  const api = new BoardAPI();\n  return api.fetchBoardList();\n}\nexport function updateLocalStorageBoards(boards: IBoard[]) {\n  localStorage.setItem(LocalStorageKeyName, JSON.stringify(boards));\n}\n","import React, { useEffect, useState } from \"react\";\nimport Board from \"../Components/Board/Board\";\nimport \"./Dashboard.css\";\nimport CustomInput from \"../Components/CustomInput/CustomInput\";\nimport { ICard, IBoard } from \"../Interfaces/Kanban\";\nimport { fetchBoardList, updateLocalStorageBoards } from \"../Helper/APILayers\";\n\nfunction Dashboard() {\n  const [boards, setBoards] = useState<IBoard[]>([]);\n  useEffect(() => {\n    fetchData();\n  }, []);\n\n  async function fetchData() {\n    const boards: IBoard[] = await fetchBoardList();\n    setBoards(boards);\n  }\n  const [targetCard, setTargetCard] = useState({\n    boardId: 0,\n    cardId: 0,\n  });\n\n  const addboardHandler = (name: string) => {\n    const tempBoardsList = [...boards];\n    tempBoardsList.push({\n      id: Date.now() + Math.random() * 2,\n      title: name,\n      cards: [],\n    });\n    setBoards(tempBoardsList);\n  };\n\n  const removeBoard = (boardId: number) => {\n    const boardIndex = boards.findIndex((item: IBoard) => item.id === boardId);\n    if (boardIndex < 0) return;\n\n    const tempBoardsList = [...boards];\n    tempBoardsList.splice(boardIndex, 1);\n    setBoards(tempBoardsList);\n  };\n\n  const addCardHandler = (boardId: number, title: string) => {\n    const boardIndex = boards.findIndex((item: IBoard) => item.id === boardId);\n    if (boardIndex < 0) return;\n\n    const tempBoardsList = [...boards];\n    tempBoardsList[boardIndex].cards.push({\n      id: Date.now() + Math.random() * 2,\n      title,\n      labels: [],\n      date: \"\",\n      tasks: [],\n      desc: \"\",\n    });\n    setBoards(tempBoardsList);\n  };\n\n  const removeCard = (boardId: number, cardId: number) => {\n    const boardIndex = boards.findIndex((item: IBoard) => item.id === boardId);\n    if (boardIndex < 0) return;\n\n    const tempBoardsList = [...boards];\n    const cards = tempBoardsList[boardIndex].cards;\n\n    const cardIndex = cards.findIndex((item) => item.id === cardId);\n    if (cardIndex < 0) return;\n\n    cards.splice(cardIndex, 1);\n    setBoards(tempBoardsList);\n  };\n\n  const updateCard = (boardId: number, cardId: number, card: ICard) => {\n    const boardIndex = boards.findIndex((item) => item.id === boardId);\n    if (boardIndex < 0) return;\n\n    const tempBoardsList = [...boards];\n    const cards = tempBoardsList[boardIndex].cards;\n\n    const cardIndex = cards.findIndex((item) => item.id === cardId);\n    if (cardIndex < 0) return;\n\n    tempBoardsList[boardIndex].cards[cardIndex] = card;\n\n    setBoards(tempBoardsList);\n  };\n\n  const onDragEnd = (boardId: number, cardId: number) => {\n    const sourceBoardIndex = boards.findIndex(\n      (item: IBoard) => item.id === boardId,\n    );\n    if (sourceBoardIndex < 0) return;\n\n    const sourceCardIndex = boards[sourceBoardIndex]?.cards?.findIndex(\n      (item) => item.id === cardId,\n    );\n    if (sourceCardIndex < 0) return;\n\n    const targetBoardIndex = boards.findIndex(\n      (item: IBoard) => item.id === targetCard.boardId,\n    );\n    if (targetBoardIndex < 0) return;\n\n    const targetCardIndex = boards[targetBoardIndex]?.cards?.findIndex(\n      (item) => item.id === targetCard.cardId,\n    );\n    if (targetCardIndex < 0) return;\n\n    const tempBoardsList = [...boards];\n    const sourceCard = tempBoardsList[sourceBoardIndex].cards[sourceCardIndex];\n    tempBoardsList[sourceBoardIndex].cards.splice(sourceCardIndex, 1);\n    tempBoardsList[targetBoardIndex].cards.splice(\n      targetCardIndex,\n      0,\n      sourceCard,\n    );\n    setBoards(tempBoardsList);\n\n    setTargetCard({\n      boardId: 0,\n      cardId: 0,\n    });\n  };\n\n  const onDragEnter = (boardId: number, cardId: number) => {\n    if (targetCard.cardId === cardId) return;\n    setTargetCard({\n      boardId: boardId,\n      cardId: cardId,\n    });\n  };\n\n  useEffect(() => {\n    updateLocalStorageBoards(boards);\n  }, [boards]);\n  return (\n    <div className=\"app\">\n      <div className=\"app-nav\">\n        <h1>Todo Kanban Board</h1>\n      </div>\n      <div className=\"app-boards-container\">\n        <div className=\"app-boards\">\n          {boards.map((item) => (\n            <Board\n              key={item.id}\n              board={item}\n              addCard={addCardHandler}\n              removeBoard={() => removeBoard(item.id)}\n              removeCard={removeCard}\n              onDragEnd={onDragEnd}\n              onDragEnter={onDragEnter}\n              updateCard={updateCard}\n            />\n          ))}\n          <div className=\"app-boards-last\">\n            <CustomInput\n              displayClass=\"app-boards-add-board\"\n              editClass=\"app-boards-add-board-edit\"\n              placeholder=\"Enter Board Name\"\n              text=\"Add Board\"\n              buttonText=\"Add Board\"\n              onSubmit={addboardHandler}\n            />\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Dashboard;\n","import Dashboard from \"./Home/Dashboard\";\n\nfunction App() {\n  return <Dashboard />;\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\"),\n);\n"],"sourceRoot":""}